// Generated by CoffeeScript 1.8.0
var __slice = [].slice;

exports.mixin = function(cls, proto) {
  var method, name;
  for (name in proto) {
    method = proto[name];
    cls.prototype[name] = method;
  }
};

exports.compile = function(methods) {
  var name, params, proto, _fn;
  proto = {};
  _fn = function(name, params) {
    var alias, aliases, description, exclude, key, method, type, _i, _len, _ref, _results;
    key = params.key, type = params.type, description = params.description, exclude = params.exclude, aliases = params.aliases;
    key || (key = name);
    method = type === 'boolean' ? function(val) {
      var k, _i, _len, _ref;
      if (val || arguments.length === 0) {
        if (exclude) {
          _ref = [].concat(exclude);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            k = _ref[_i];
            delete this._args[methods[k].key || k];
          }
        }
        this._args[key] = [];
      } else {
        delete this._args[key];
      }
      return this;
    } : (!Array.isArray(type) ? type = [type || 'string'] : void 0, function() {
      var args, nval, t, val, vals, _i, _len;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (args.lelgth < type.length) {
        throw new Error('Not enough arguments');
      }
      vals = [];
      for (_i = 0, _len = type.length; _i < _len; _i++) {
        t = type[_i];
        val = args.shift();
        if ((t === 'number') && (Number.isFinite(nval = Number(val)))) {
          val = nval;
        }
        if (typeof val !== t) {
          throw new Error("Expected " + t + ", got " + (typeof val));
        }
        vals.push(val);
      }
      this._args[key] = vals;
      return this;
    });
    method.description = description;
    _ref = [].concat(name, aliases || []);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      alias = _ref[_i];
      _results.push(proto[alias] = method);
    }
    return _results;
  };
  for (name in methods) {
    params = methods[name];
    _fn(name, params);
  }
  return proto;
};
